<%
def make_type(it)
    res = case it[:type]
    when "int" then
      "usize"
    when "enum" then
      @enum_flag = true
      @fields << it[:value] if it[:value].present?
      "HashSet<#{it[:value].ucc}Field>"
    when "enum_single" then
      name = it[:name].ucc
      @enum_request[name] = it[:value]
      name
    when "bool" then
      "bool"
    when "array" then
      "Vec<#{it[:items][:type].ucc}>"
    else
      "String"
    end
    if it[:required]
      res
    else
      "Option<#{res}>"
    end
  end
%>#[derive(Debug, Clone, Default)]
pub struct Api {
    options: Option<ApiOptions>,<% queries.each do |it| %>
    <%= it[:name].make_name.make_field %>: <%= make_type(it) %>,<% end %><% if bodies.present? %>
    body: Body,<% end %>
}

<% @enum_request.each_pair do |key, ary| %>
  #[derive(Serialize, Deserialize, Debug, Clone)]
  pub enum <%= key %> {<% ary.each do |it| %>
      #[serde(rename = "<%= it %>")]
      <%= it.ucc %>,<% end %>
  }
  
  impl std::fmt::Display for <%= key %> {
      fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
          match self {<% ary.each do |it| %>
              Self::<%= it.ucc %> => write!(f, "<%= it %>"),<% end %>
          }
      }
  }
  
  impl Default for <%= key %> {
      fn default() -> Self { Self::<%= ary.first.ucc %> }
  }
  <% end %>